# Дана функция

lst = [10, 20, 100]

# "Для заданной функции написать декоратор, который выводит следующую информацию:
# 1. ""Wrapper start"" (до выполнения функции)
# 2. ""Result is: %результат выполнения функции%""
# 3. ""Wrapper end"" (после выполнения функции)
# Декоратор должен возвращать результат выполнения функции и не должен его менять. 
# "
def decorator(func):
    def __inner(lst):
        print(f"Wrapper start for function {func.__name__}")
        result = func(lst)
        print(f"Result is: {result}")
        print(f"Wrapper end for function {func.__name__}")
        return result
    return __inner

@decorator
def return_sum(lst):
    return sum(lst)

return_sum([10, 20, 100])
# "Теперь во ""Wrapper Start"" и ""Wrapper End"" добавьте вывод названия вызываемой функции в формате: 
# ""for function: %имя функции%"""
# "Теперь добавьте возможность вызывать декоратор N раз (N >= 1). 
# Количество вызовов должно указываться при применении декоратора. 
# Текст, который мы выводили раньше должен печататься каждый раз."
# Теперь добавьте возможность декорировать функцию с любыми аргументами


